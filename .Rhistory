filter(username != "CPEC_Official") %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
# Positive
afinn_scores %>%
filter(username != "CPEC_Official" & !str_detect(value, "-")) %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(desc(count)) %>%
left_join(afinn_scores %>% distinct(word, value), by = "word")
# Negative
afinn_scores %>%
filter(username != "CPEC_Official" & str_detect(value, "-")) %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(desc(count)) %>%
left_join(afinn_scores %>% distinct(word, value), by = "word")
afinn_bar <- afinn_word_count %>% group_by(sentiment) %>% slice_max(n, n = 10) %>% ungroup() %>% mutate(word = reorder(word, n))
#cleaning up the global environment
rm(afinn_word_count)
afinn_bar %>% ggplot(aes(n, word, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(x = "Contribution to sentiment",
y = NULL) +
theme_clean()
#prepping to load in the third lexicon bing where I'll be looking at if a word is either positive or negative
bing <- get_sentiments("bing")
#exploring bing dataset
bing %>% filter(sentiment == "positive")
#Code to check what words are in the bing database
bing %>% filter(word == 'opportunity')
#We can combine the words and sentiments using inner_join(), which will only keep words associated with a sentiment.
# bing_scores_b means this data frame is biased because chinese state media sources are included
bing_scores_b <- tweet_words_china %>% inner_join(bing, by = "word")
#tidying up
rm(bing)
#filtering out misleading words from our bing dataset
bing_scores_b <- bing_scores_b %>% filter(!word %in% c("trump", "premier", "gold", "vice", "dawn", "soft", "ambitious", "rail"))
#zzzz <- bing_scores %>% filter(word  == "ready")
#Getting rid of biased Chinese state media sources from overall bing_scores data frame
bing_scores <- bing_scores_b %>% filter(!username %in% china_offical_news)
#note that we're counting words (that are in the lexicon) per username, not tweets
bing_scores %>% count(username, sort = TRUE) %>% top_n(10)
#This new code version is sooo much cleaner
bing_scores %>%
filter(username != "CPEC_Official") %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
bing_word_counts <- bing_scores %>%
filter(username != "CPEC_Official") %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
# Positive sentiment words
bing_scores %>%
filter(username != "CPEC_Official" & sentiment == "positive") %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(desc(count)) %>%
left_join(bing_scores %>% distinct(word, sentiment), by = "word")
# negative sentiment words
bing_scores %>%
filter(username != "CPEC_Official" & sentiment == "negative") %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(desc(count)) %>%
left_join(bing_scores %>% distinct(word, sentiment), by = "word")
bing_bar <- bing_word_counts %>% group_by(sentiment) %>% slice_max(n, n = 20) %>% ungroup() %>% mutate(word = reorder(word, n))
#just trying to clean up the global environment
rm(bing_word_counts)
bing_bar %>% ggplot(aes(n, word, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(title = "Bing",
x = "Contribution to sentiment",
y = NULL) +
theme_clean()
#Creating a dataframe called tweet_sentiments that contains the month, year, average sentiment of tweets for timer period, and number of tweets
#n_tweets = n() is used to create a new column in the summarized data frame that contains the number of tweets per month.
#When using dplyr functions like summarize(), you can use the n() function to count the number of rows in a group. In this case, we're grouping the data by month (in the format month-year) using group_by(month), and then counting the number of rows in each group (i.e., the number of tweets in each month) using n()
tweet_sentiments_a <- afinn_scores %>%
group_by(month, year) %>%
summarise(sentiment = mean(value), n_tweets = n()) %>%
#Changing the format of the month variable back into a date format so that we can use the geom_smooth function with it
mutate(month = as.Date(paste0("01-", month), format = "%d-%m-%y"))
#Ensuring that the correct number of tweets are gathered for tweet_sentiments above
#tweets_EN %>% filter(month == '10-14')
#afinn_scores %>% filter(month == '10-14')
tweet_sentiments_a %>% ggplot(aes(month, sentiment)) +
#geom_smooth(color = "red", linetype = "solid", se = FALSE) +
geom_line(color = "blue", size = 1) +
geom_point(aes(size = n_tweets), alpha = 0.6, color = "blue") +
# Add vertical lines for each year (like x = 3)
geom_vline(aes(xintercept = as.numeric(as.Date(paste0(year, "-01-01")))),
color = "gray", linetype = "dotted") +
labs(
title = "Average Sentiment Score of Tweets by Month from 2014 - 2023",
x = "Time",
y = "Sentiment Score (-6 to 6)",
size = "Tweet Size"
)+
#scale_y_continuous(
#breaks = seq(-1, 1, by = .2),
#limits = c(-1, 1)) +
#Organizes the x axis by each month then formats how we want it labeled
scale_x_date(
date_breaks = "1 year",
date_labels = "%b '%y",
expand = c(0.1, 1)) +
#date_minor_breaks = "1 month", minor_breaks = "1 month") +
theme_clean() +
theme(
panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"),
legend.position = c(.7, .8),
legend.direction = "horizontal",
legend.title = element_text(size = 10.5),
legend.text = element_text(size = 10)
)
sentiment_year <- list()
for (yr in unique(tweet_sentiments_a$year)) {
df_year <- subset(tweet_sentiments_a, year == yr)
plot <- ggplot(df_year, aes(month, sentiment)) +
#geom_smooth(color = "red", linetype = "solid", se = FALSE) +
geom_line(color = "blue", size = 1) +
geom_point(aes(size = n_tweets), alpha = 0.6, color = "blue") +
# Add vertical lines for each month
geom_vline(aes(xintercept = month), color = "gray", linetype = "dotted") +
labs(
title = paste0("Average Sentiment Score of Tweets by Month in ", yr),
x = paste0("Month (", yr, ")"),
y = "Sentiment Score (-6 to 6)",
size = "Tweet Size"
)+
#scale_y_continuous(
#breaks = seq(-1, 1, by = .2),
#limits = c(-1, 1)) +
#Organizes the x axis by each month then formats how we want it labeled
scale_x_date(
date_breaks = "1 month",
date_labels = "%b") +
#date_minor_breaks = "1 month", minor_breaks = "1 month") +
theme_clean() +
theme(
panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"),
legend.position = c(.7, .8),
legend.direction = "horizontal",
legend.title = element_text(size = 10.5),
legend.text = element_text(size = 10)
)
sentiment_year[[yr]] <- plot
rm(plot, df_year)
}
sentiment_year[["2018"]]
#plot_grid(plotlist = sentiment_year, ncol = 3)
#Investigating top 5, 10, and 20 twitter accounts who's tweets contain sentiments that match our lexicon list and therefore are more influential in the data
#code that gathers the top 5, 10, and 20 users that tweeted about China's BRI and creates a temporary data frame
top_20_afinn <- afinn_scores %>% count(username, sort = TRUE) %>% top_n(20)
top_10_afinn <- afinn_scores %>% count(username, sort = TRUE) %>% top_n(10)
top_5_afinn <- afinn_scores %>% count(username, sort = TRUE) %>% top_n(5)
#Code for separate sentiment analysis just on the top tweeters to see how they are influencing the conversation
#Extracting the distinct usernames from the top 5, 10, and 20 df's respectively and putting the usernames into a list
top_20_a <- top_20_afinn$username
top_10_a <- top_10_afinn$username
top_5_a <- top_5_afinn$username
#tidying up
rm(top_10_afinn, top_5_afinn, top_20_afinn)
#Looking at the sentiment of our top 10 tweeters (gathered from code above) to see how they are influencing the conversation
#Note that the the top tweeters does not necessarily translate to the top tweeters who displayed some sentiment about belt and Road
#hence, the drastic decline of user "Shyam17"
O_list <- list(top_5_a, top_10_a, top_20_a)
names(O_list) <- c("top_5", "top_10", "top_20")
TopX_list <- list()
for (list in names(O_list)) {
topx <- afinn_scores %>%
filter(username %in% O_list[[list]]) %>%
group_by(month) %>%
summarise(sentiment = mean(value), n_tweets = n()) %>%
mutate(month = as.Date(paste0("01-", month), format = "%d-%m-%y"))
TopX_list[[list]] <- topx
}
TopX_list[["top_10"]]
rm(O_list, topx, list)
#verifiying that only the top 10 usernames saved
#sentiments_top10 %>% count(username, sort = TRUE)
#Graphing top 5, 10, and 20 twitter accounts sentiment individually
topx_graphs <- list()
for (topx in names(TopX_list)) {
plot <-ggplot(TopX_list[[topx]], aes(month, sentiment)) +
geom_line(color = "blue", size = 1) +
geom_point(aes(size = n_tweets), alpha = 0.6, color = "blue") +
labs(
title = paste0("Average Sentiment Score by ", topx ," Tweeters over time"),
x = "Month",
y = "Sentiment Score (-6 to 6)",
size = "Tweet Size"
)+
#scale_y_continuous(
#breaks = seq(-.8, 1.2, by = .2),
#limits = c(-.8, 1.2)) +
#Organizes the x axis by each month then formats how we want it labeled
scale_x_date(
date_breaks = "1 year",
date_labels = "%b '%y") +
#date_minor_breaks = "1 month", minor_breaks = "1 month") +
theme_clean() +
theme(
panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"),
legend.position = c(.6, .8),
legend.direction = "horizontal",
legend.title = element_text(size = 10.5),
legend.text = element_text(size = 10)
)
topx_graphs[[topx]] <- plot
}
topx_graphs[["top_10"]]
rm(plot, topx)
# I don't use use top_n here because then it would compared relative size of tweets to it's own data frame (making it look like top_20 had less tweets)
ggplot() +
geom_point(data = TopX_list[["top_5"]], aes(month, sentiment, color = "Top 5"), size = 2) +
geom_smooth(data = TopX_list[["top_5"]], aes(month, sentiment), se = FALSE, color = "green") +
geom_point(data = TopX_list[["top_10"]], aes(month, sentiment, color = "Top 10"), size = 2) +
geom_smooth(data = TopX_list[["top_10"]], aes(month, sentiment), se = FALSE, color = "red") +
geom_point(data = TopX_list[["top_20"]], aes(month, sentiment, color = "Top 20"), size = 2) +
geom_smooth(data = TopX_list[["top_20"]], aes(month, sentiment), se = FALSE, color = "blue") +
scale_color_manual(values = c("Top 5" = "green", "Top 10" = "red",  "Top 20" = "blue")) +
#labels = c("Top 5", "Top 10", "top 20")) +
labs(
title = "Average Sentiment Score by Tweeters",
x = "Year",
y = "Sentiment Score (-6 to 6)",
color = NULL
)+
scale_y_continuous(
breaks = seq(-2, 2, by = 1),
limits = c(-2, 2)) +
#Organizes the x axis by each month then formats how we want it labeled
scale_x_date(
date_breaks = "1 year",
date_labels = "%b '%y") +
#date_minor_breaks = "1 month", minor_breaks = "1 month") +
theme_clean() +
theme(panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"),
legend.position = c(.5, .2),
legend.direction = "horizontal",
legend.text = element_text(size = 10))
top_users_list <- list()
#Creating 20 different dataframes based on the top 20 tweeters
for (user in top_20_a) {
hum <- afinn_scores %>% filter(username == user) %>%
group_by(month) %>%
summarise(sentiment = mean(value), n_tweets = n()) %>%
mutate(month = as.Date(paste0("01-", month), format = "%d-%m-%y"))
top_users_list[[user]] <- hum
rm(hum)
}
#list of top 20 users to choose from
names(top_users_list)
top_users_list[["orfonline"]]
#Code to iterate through the top 20 tweeters to create the graphs for each user
top20_user_plots <- list()
# Loop through time data frames and create plots for the factor varaible teeth
for (user in names(top_users_list)) { #Equivalent of "range(len(dfs_times))" in python
plot <- ggplot(top_users_list[[user]], aes(month, sentiment)) +
geom_line(color = "red", size = 1) +
geom_point(aes(size = n_tweets), alpha = 0.6, color = "red") +
labs(
title = paste0("Username: " , user) ,
x = "Month",
y = "Sentiment Score (-6 to 6)") +
#Organizes the x axis by each month then formats how we want it labeled
scale_x_date(
date_breaks = "1 year",
date_labels = "%b '%y") +
theme_clean()
top20_user_plots[[user]] <- plot
}
names(top20_user_plots)
top20_user_plots[["hktdc"]]
rm(plot)
#plot_grid(plotlist = top20_user_plots, ncol = 6)
#taking all Chinese state media twitter accounts and putting them in a list
#Already done above, so to avoid redundancy here's the list again!
china_offical_news
#Looking at the sentiment of only Chinese state media twitter accounts to see how they are influencing the conversation
#Note that the the top tweeters does not necessarily translate to the top tweeters who displayed some sentiment about belt and Road
sentiments_CSM <- afinn_scores_b %>%
filter(username %in% china_offical_news) %>%
group_by(month) %>%
summarise(sentiment = mean(value), n_tweets = n()) %>%
mutate(month = as.Date(paste0("01-", month), format = "%d-%m-%y"))
#verifiying that only the top 10 usernames saved
#sentiments_top10 %>% count(username, sort = TRUE)
sentiments_CSM %>% ggplot(aes(month, sentiment)) +
geom_line(color = "blue", size = 1) +
geom_point(aes(size = n_tweets), alpha = 0.6, color = "blue") +
labs(
title = "Average Sentiment Score by Offical Chinese State Media",
x = "Year",
y = "Sentiment Score (-6 to 6)",
size = "Tweet Size"
)+
scale_y_continuous(
breaks = seq(-2, 2, by = 1),
limits = c(-2, 2)) +
#Organizes the x axis by each month then formats how we want it labeled
scale_x_date(
date_breaks = "1 year",
date_labels = "%b '%y") +
theme_clean() +
theme(
panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"),
legend.position = c(.5, .3),
legend.direction = "horizontal",
legend.title = element_text(size = 10.5),
legend.text = element_text(size = 10)
)
outlets <- list()
for (outlet in china_offical_news) {
CSM_outlet <- afinn_scores_b %>%
filter(username == outlet) %>%
group_by(month) %>%
summarise(sentiment = mean(value), n_tweets = n()) %>%
mutate(month = as.Date(paste0("01-", month), format = "%d-%m-%y"))
outlets[[outlet]] <- CSM_outlet
}
china_offical_news
outlets[["CCTV"]]
#graph is scrunched on y axis to focus on smoothing line
ggplot() +
geom_point(data = outlets[["beltroadnews"]], aes(month, sentiment, color = "beltroadnews"), size = 3) +
geom_smooth(data = outlets[["beltroadnews"]], aes(month, sentiment), se = FALSE, color = "red")+
geom_point(data = outlets[["XHNews"]], aes(month, sentiment, color = "XHNews"), size = 3) +
geom_smooth(data = outlets[["XHNews"]], aes(month, sentiment), se = FALSE, color = "blue") +
geom_point(data = outlets[["globaltimesnews"]], aes(month, sentiment, color = "globaltimesnews"), size = 3) +
geom_smooth(data = outlets[["globaltimesnews"]], aes(month, sentiment), se = FALSE, color = "green") +
geom_point(data = outlets[["ChinaDaily"]], aes(month, sentiment, color = "ChinaDaily"), size = 3) +
geom_smooth(data = outlets[["ChinaDaily"]], aes(month, sentiment), se = FALSE, color = "orange") +
scale_color_manual(values = c("beltroadnews" = "red", "XHNews" = "blue",  "globaltimesnews" = "green", "ChinaDaily" = "orange")) +
labs(
title = "Average Sentiment Score by Month",
x = "Year",
y = "Sentiment Score (-6 to 6)",
color = "News Agency") +
scale_y_continuous(
breaks = seq(0, 2, by = .2),
limits = c(0, 2)) +
#Organizes the x axis by each month then formats how we want it labeled
scale_x_date(
date_breaks = "1 year",
date_labels = "%b '%y") +
theme_clean()
#Graph plotting Top 5, top 10, all tweets, and Chinese state media tweets together on the same plot to see their influence
ggplot() +
geom_point(data = tweet_sentiments_a, aes(month, sentiment, color = "All Tweets"), size = 3) +
geom_smooth(data = tweet_sentiments_a, aes(month, sentiment), se = FALSE, color = "red")+
geom_point(data = TopX_list[["top_5"]], aes(month, sentiment, color = "Top 5"), size = 3) +
geom_smooth(data = TopX_list[["top_5"]], aes(month, sentiment), se = FALSE, color = "blue") +
#  geom_point(data = TopX_list[["top_10"]], aes(month, sentiment, color = "Top 10"), size = 3) +
#  geom_smooth(data = TopX_list[["top_10"]], aes(month, sentiment), se = FALSE, color = "purple") +
#  geom_point(data = TopX_list[["top_20"]], aes(month, sentiment, color = "Top 20"), size = 3) +
#  geom_smooth(data = TopX_list[["top_20"]], aes(month, sentiment), se = FALSE, color = "green") +
geom_point(data = sentiments_CSM, aes(month, sentiment, color = "Chinese State Media"), size = 3) +
geom_smooth(data = sentiments_CSM, aes(month, sentiment), se = FALSE, color = "orange") +
scale_color_manual(values = c("All Tweets" = "red", "Top 5" = "blue", "Top 10" = "purple", "Top 20" = "green", "Chinese State Media" = "orange")) +
#labels = c("All Tweeters", "Top Ten", "Top Five", "CSM")) +
labs(
title = "Average Sentiment Score from 2014-2022",
x = "Year",
y = "Sentiment Score (-6 to 6)",
color = "Group") +
#scale_y_continuous(
#breaks = seq(-0.5, 2, by = .2),
#limits = c(-0.5, 2)) +
#Organizes the x axis by each month then formats how we want it labeled
scale_x_date(
date_breaks = "1 year",
date_labels = "%b '%y") +
theme_clean() +
theme(panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"))
ggplot() +
geom_point(data = tweet_sentiments_a, aes(month, sentiment, color = "All Tweets"), size = 3) +
geom_smooth(data = tweet_sentiments_a, aes(month, sentiment), color = "red")+
#  geom_point(data = TopX_list[["top_5"]], aes(month, sentiment, color = "Top 5"), size = 3) +
#  geom_smooth(data = TopX_list[["top_5"]], aes(month, sentiment), se = FALSE, color = "blue") +
#  geom_point(data = TopX_list[["top_10"]], aes(month, sentiment, color = "Top 10"), size = 3) +
#  geom_smooth(data = TopX_list[["top_10"]], aes(month, sentiment), se = FALSE, color = "purple") +
#  geom_point(data = TopX_list[["top_20"]], aes(month, sentiment, color = "Top 20"), size = 3) +
#  geom_smooth(data = TopX_list[["top_20"]], aes(month, sentiment), se = FALSE, color = "green") +
geom_point(data = sentiments_CSM, aes(month, sentiment, color = "Chinese State Media"), size = 3) +
geom_smooth(data = sentiments_CSM, aes(month, sentiment), color = "orange") +
scale_color_manual(values = c("All Tweets" = "red", "Top 5" = "blue", "Top 10" = "purple", "Top 20" = "green", "Chinese State Media" = "orange")) +
#labels = c("All Tweeters", "Top Ten", "Top Five", "CSM")) +
labs(
title = "Average Sentiment Score from 2014-2023",
x = "Month",
y = "Sentiment Score (-6 to 6)",
color = "Tweet Source") +
scale_y_continuous(
breaks = seq(-2, 2, by = 1),
limits = c(-2, 2)) +
#Organizes the x axis by each month then formats how we want it labeled
scale_x_date(
date_breaks = "1 year",
date_labels = "%b '%y") +
theme_clean() +
theme(panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"))
#standardizing the bing lexicon to compare (positive = 1, negative = -1) then averaging them out to plot them over time
bing_scores$stan <- ifelse(bing_scores$sentiment == "positive", 1, -1)
#Creating a dataframe called tweet_sentiments that contains the month, average sentiment of tweets for that month, and number of tweets
#n_tweets = n() is used to create a new column in the summarized data frame that contains the number of tweets per month.
#When using dplyr functions like summarize(), you can use the n() function to count the number of rows in a group. In this case, we're grouping the data by month (in the format month-year) using group_by(month), and then counting the number of rows in each group (i.e., the number of tweets in each month) using n()
tweet_sentiments_b <- bing_scores %>%
group_by(month, year) %>%
summarise(sentiment = mean(stan), n_tweets = n()) %>%
#Changing the format of the month variable back into a date format so that we can use the geom_smooth function with it
mutate(month = as.Date(paste0("01-", month), format = "%d-%m-%y"))
#modification of afinn tweet_sentiments to be based on standardized column for comparison against bing
tweet_sentiments_a_s <- afinn_scores %>%
group_by(month, year) %>%
summarise(sentiment = mean(stan), n_tweets = n()) %>%
#Changing the format of the month variable back into a date format so that we can use the geom_smooth function with it
mutate(month = as.Date(paste0("01-", month), format = "%d-%m-%y"))
tweet_sentiments_b %>% ggplot(aes(month, sentiment)) +
#geom_smooth(color = "red", linetype = "solid", se = FALSE) +
geom_line(color = "blue", size = 1) +
geom_point(aes(size = n_tweets), alpha = 0.6, color = "blue") +
# Add vertical lines for each year
geom_vline(aes(xintercept = as.numeric(as.Date(paste0(year, "-01-01")))),
color = "gray", linetype = "dotted") +
labs(
title = "Average Sentiment of Tweets Using Bing Lexicon",
x = "Year",
y = "Sentiment Score (-1 to 1)",
size = "Tweet Size"
)+
#scale_y_continuous(
#breaks = seq(-1, 1, by = .2),
#limits = c(-1, 1)) +
#Organizes the x axis by each month then formats how we want it labeled
scale_x_date(
date_breaks = "1 year",
date_labels = "%b '%y") +
#date_minor_breaks = "1 month", minor_breaks = "1 month") +
theme_clean() +
theme(panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"),
legend.position = c(.7, .2),
legend.direction = "horizontal",
legend.title = element_text(size = 10.5),
legend.text = element_text(size = 10))
sentiment_year_b <- list()
for (yr in unique(tweet_sentiments_b$year)) {
df_year <- subset(tweet_sentiments_b, year == yr)
plot <- ggplot(df_year, aes(month, sentiment)) +
#geom_smooth(color = "red", linetype = "solid", se = FALSE) +
geom_line(color = "blue", size = 1) +
geom_point(aes(size = n_tweets), alpha = 0.6, color = "blue") +
# Add vertical lines for each month
geom_vline(aes(xintercept = month), color = "gray", linetype = "dotted") +
labs(
title = paste0("Average Sentiment of Tweets (Bing) in ", yr),
x = paste0("Month (", yr, ")"),
y = "Sentiment Score (-6 to 6)",
size = "Tweet Size"
)+
#scale_y_continuous(
#breaks = seq(-1, 1, by = .2),
#limits = c(-1, 1)) +
#Organizes the x axis by each month then formats how we want it labeled
scale_x_date(
date_breaks = "1 month",
date_labels = "%b") +
#date_minor_breaks = "1 month", minor_breaks = "1 month") +
theme_clean() +
theme(panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"),
#legend.position = c(.7, .3),
#legend.direction = "horizontal",
legend.title = element_text(size = 10.5),
legend.text = element_text(size = 10))
sentiment_year_b[[yr]] <- plot
rm(plot, df_year)
}
sentiment_year_b[["2018"]]
#plot_grid(plotlist = sentiment_year, ncol = 3)
ggplot() +
geom_line(data = tweet_sentiments_a_s, aes(month, sentiment, color = "All Tweets (Afinn)"), size = 1) +
geom_line(data = tweet_sentiments_b, aes(month, sentiment, color = "All Tweets (Bing)"), size = 1) +
scale_color_manual(values = c("All Tweets (Afinn)" = "red", "All Tweets (Bing)" = "blue")) +
labs(
title = "Average Sentiment Score of Tweets from 2014 - 2023",
subtitle = "Sentiment standardized on -1 to 1 scale",
x = "Year",
y = "Sentiment Score (-1 to 1)",
size = "Tweet Size",
color = "Lexicon"
)+
#scale_y_continuous(
#breaks = seq(-2, 2, by = .2),
#limits = c(-2, 2)) +
#Organizes the x axis by each month then formats how we want it labeled
scale_x_date(
date_breaks = "1 year",
date_labels = "%b '%y") +
#date_minor_breaks = "1 month", minor_breaks = "1 month") +
theme_clean() +
theme(
panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"),
legend.position = c(.7, .9),
legend.direction = "horizontal",
legend.title = element_text(size = 10.5),
legend.text = element_text(size = 10)
)
# Present results
